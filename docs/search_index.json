[
["index.html", "Digital Humanities in Middle Eastern Studies Syllabus Course Details 0.1 Aims, contents and method of the course 0.2 Course Evaluation 0.3 Class Participation 0.4 Homework 0.5 Final Project 0.6 Study materials: 0.7 Software, Tools, &amp; Technologies: 0.8 Submitting Homework: 0.9 Schedule 0.10 Lesson Topics (subject to modification)", " Digital Humanities in Middle Eastern Studies Maxim G. Romanov 2021-10-25 Syllabus Course Details Course: 57-525 S: Digital Humanities in Middle East Studies — Introduction to Algorithmic Analysis (WS2021) Language of instruction: English Meeting time: Mo 12:00-14:00 Meeting place: due to COVID, all meetings will be held online via Zoom Meeting link: shared via Slack; other details are available via STiNE Office hours: Mo 14:00-15:00 (on Zoom); if you have any questions, please, post them on Slack Instructor: Dr. Maxim Romanov, maxim.romanov@uni-hamburg.de Course: 070172-1 UE Methodological course - Introduction to DH: Tools &amp; Techniques (2020W) Memex Edition Instructor: Dr. Maxim Romanov, maxim.romanov@univie.ac.at 0.1 Aims, contents and method of the course The course is a practical introduction to a series of digital tools and techniques that are relevant for analytical work both inside and outside of academia. The course will cover such topics as sustainable academic/analytical writing, organization of research workflow, data collection and structuring, as well as basics of text analysis, mapping, and social network analysis. In the course of these units, you will start working with Python, one of the most prominent programming languages used now by humanists and data scientists alike (no prior programming experience is required, but beneficial). The assessment will be based on your in-class participation, timely submission of homework assignments, and the final project, where you will be encouraged to work with data from your disciplinary domain. Personal computers are required both for in-class work and for your homework (running full versions of either Windows, MacOS, or Linux; unfortunately, neither tablets nor Chrome-based laptops are suitable for this course). 0.2 Course Evaluation Course evaluation will be a combination of in-class participation (30%), weekly homework assignments (50%), and the final project (20%). 0.3 Class Participation Each class session will consist in large part of practical hands-on exercises led by the instructor. BRING YOUR LAPTOP! We will accommodate whatever operating system you use (Windows, Mac, Linux), but it should be a laptop rather than a tablet. Don’t forget that asking for help counts as participation! 0.4 Homework Just as in research and real life, collaboration is a very good way to learn and is therefore encouraged. If you need help with any assignment, you are welcome to ask a fellow student. If you do work together on homework assignments, then when you submit it please include a brief note (just a sentence or two) to indicate who did what. NB: On submitting homework, see below. 0.5 Final Project Final project will be discussed later. You will have an option to build on what we will be doing in class, but you are most encouraged to pick a topic of your own. The best option will be to work on something relevant to your field of study, your term paper or your thesis. 0.6 Study materials: Most study materials will be distributed by the instructor. * Zelle, John M. 2016. Python Programming: An Introduction to Computer Science. 3rd edition. Portland, Oregon: FRANKLIN BEEDLE &amp; ASSOC. * “Programming Historian” offers a number of tutorials for aspiring digital humanists. These will be assigned to you as reference materials. You also are encouraged to explore those tutorials that are not included into the course. https://programminghistorian.org/lessons/ * Paul Vierthaler’s “Hacking the Humanities Tutorials” (Python), https://www.youtube.com/playlist?list=PL6kqrM2i6BPIpEF5yHPNkYhjHm-FYWh17 0.7 Software, Tools, &amp; Technologies: The following is the list of software, applications and packages that we will be using in the course. Make sure to have them installed by the class when we are supposed to use them. Zotero, https://www.zotero.org/; MS Word or Apache OpenOffice (you most likely already have one of these) [Mac] Terminal / [Windows] Powershell (both are already on your machines) Python https://www.python.org/ git and https://github.com/, version control system pandoc (https://pandoc.org/), markdown, bibTeX (bibliographical format for LaTeX) QGIS, a Free and Open Source Geographic Information System (https://qgis.org/en/site/) Regular expressions, EditPad Pro/Sublime Text Wget (https://www.gnu.org/software/wget/), a free software package for retrieving files [TEI] XML, csv/tsv, json, yml, etc. Gephi (https://gephi.org/) 0.8 Submitting Homework: Homework assignments are to be submitted by the beginning of the next class; For the first few classes you must email them to the instructor (as attachments) Later, you will be publishing your homework assignments on your github pages and sending an email to the instructor informing that you have completed your homework and providing a relevant github link. In the subject of your email, please, use the following format: CourseID-LessonID-HW-Lastname-matriculationNumber, for example, if I were to submit homework for the first lesson, my subject header would look like: 070112-L01-HW-Romanov-12435687. DH is a collaborative field, so you are most welcome to work on your homework assignments in groups, however, you must still submit it. That is, if a groups of three works on one assignment, there must be three separate submissions: either emailed from each member’s email and published at each member’s github page. 0.9 Schedule Location: Online 01 - Mo, 11. Okt. 2021 - 12:00-14:00 02 - Mo, 18. Okt. 2021 - 12:00-14:00 03 - Mo, 25. Okt. 2021 - 12:00-14:00 04 - Mo, 01. Nov. 2021 - 12:00-14:00 05 - Mo, 08. Nov. 2021 - 12:00-14:00 06 - Mo, 15. Nov. 2021 - 12:00-14:00 07 - Mo, 22. Nov. 2021 - 12:00-14:00 08 - Mo, 29. Nov. 2021 - 12:00-14:00 09 - Mo, 06. Dez. 2021 - 12:00-14:00 10 - Mo, 13. Dez. 2021 - 12:00-14:00 11 - Mo, 03. Jan. 2022 - 12:00-14:00 12 - Mo, 10. Jan. 2022 - 12:00-14:00 13 - Mo, 17. Jan. 2022 - 12:00-14:00 14 - Mo, 24. Jan. 2022 - 12:00-14:00 0.10 Lesson Topics (subject to modification) [ #01 ] Citation Management and Academic Writing I - with Zotero and MS Word or Open Office [ #02 ] “Off with the Interface!” Getting to know the command line [ #03 ] Version Control and Collaboration: Github.com [ #04 ] Citation Management and Academic Writing II - with Pandoc, markdown, Zotero/BibTex [ #05 ] Constructing robust searches with Regular expressions [ #06 ] Webscraping with Wget, preparing URLs with Python and other tools [ #07 ] Text Markup [TEI XML], and how to remove it… - with Python scripts [anaconda] [ #08 ] Structuring data with Python scripts [ #09 ] Georeferencing with QGIS [ #10 ] Text to Map (1/2) - with Python and QGIS [ #11 ] Text to Map (2/2) - with Python and QGIS [ #12 ] Topic modeling - with Python; TF-IDF with Python [ #13 ] Social Network Analysis - with Gephi; preparing network data with Python [ #14 ] Final Projects Presentations "],
["lesson-01-academic-writing-i.html", "1 Lesson 01: Academic Writing I 1.1 Bibliography Managers 1.2 Zotero 1.3 Homework", " 1 Lesson 01: Academic Writing I 1.1 Bibliography Managers Bibliography managers make your life easier when it comes to collectin, organizing and maintaining bibliographical references and your library of electronic publications (most commonly as PDFs). Additionally, they are an indispensable writing tool as they take care of formatting (and reformatting) references and bibliographies in any writing project that you might undertake. There are plenty of different programs out there with their advantages and disadvantages (for example, Mendeley, RefWorks, Citavi, Endnote, Papers, Zotero, and quite a few more). We will use Zotero—it is being developed by scholars for scholars; it is free and open source; it does pretty much everything you might possibly need from a program of this kind. 1.2 Zotero 1.2.1 Getting Started Zotero can be installed from here: https://www.zotero.org/download/; the page will offer you a version suitable for your operating system, but you should also see the links to versions for specific systems (Mac OS, Windows, Linux). During installation Zotero should automatically integrate into your browser (like Chrome or Firefox) and into your word processor (MS Word, LibreOffice, GoogleDocs are supported). It is possible that you may have to do that manually. Zotero Connector for Chrome can be installed from the same page (https://www.zotero.org/download/) detailed explanations on how to use word processor plugins can be found here; you can use Zotero with MS Word, LibreOffice and Google Docs; in case you cannot get your plugin activated, check the Troubleshooting Section. 1.2.2 Main Functionality You need to be able to do the following tasks with your Zotero in order to take full advantage of its functionality. Online Tutorials: If you prefer video tutorials, you can check a series of tutorials prepared by the McGill Library (there are also plenty other tutorials on YouTube :); if you prefer to read, you can check a series of tutorials prepared by the UC Berkley Library. Adding bibliographical records (and PDFs) Using Zotero Connector: the easiest way to add a reference is from a browser with Zotero connector. This can be done practically from any library or journal database (e.g., Uni Wien Library, Worldcat.org, JSTOR); simply click the connector button while you are on a page with a publication that you want to add to your Zotero database. PDF may be automatically downloaded, if available; keep in mind that in places like JSTOR you need to agree to terms before this function will work; what you need to do is to download one PDF manually from a JSTOR page, where you will be asked to agree to terms of their services; Drag-and-dropping PDFs into Zotero; this however works only when Zotero can parse relevant bibliographical information from a PDF; This might be a good way to start if you already have lots of PDFs that you want to add to Zotero. Using Unique Identifiers: you can use ISBN or DOI numbers. Using Import: you can import bibliographical data from another application or from bibliographical files (formats, like RIS, which you can download from most libraries as well). Manually: you can manually add and fill in a record as well. Write-and-cite Detailed Instructions: MS Word, LibreOffice and Google Docs; you can also check the video tutorial. Add a citation Customize a citation (by adding prefixes, suffixes, page range for a specific reference, etc.). Change citation style. For example, change from Chicago Manual of Style to Universität Wien - Institut für Geschichte (Yes, there is this specific citation style for Zotero: https://www.zotero.org/styles?q=id%3Auniversitat-wien-institut-fur-geschichte); in order to do that you need to download the IfG style and install it into Zotero. You can find lots of different citation styles here: https://www.zotero.org/styles; to add a new style to Zotero: download the style you want. Open Zotero. Go to Preferences (under Zotero, Edit, or Tools — depending on your system). Click the “Cite” button. Click the “Styles” tab. Click the + button at the bottom right. Select the style file you saved in the first step. Generate and update bibliography in your paper. NB: If you use Zotero plugin for adding your citations, they remain connected to Zotero and can be automatically reformatted; you can also drag-and-drop any bibliographical record into any text editor—the reference will be formatted according to the currently selelected style, but it will not be connected to Zotero and cannot be reformatted automatically later. General Maintenance and Organization Zotero can [automatically] rename PDFs using metadata, although the default function is not very robust (see, Zotfile plugin below). You can create “collections” and drag-and-drop publications relevant to a specific topic or project you are working on. 1.2.3 Additional Functionality: Plug-Ins There is a variety of third-party plugins that you can add to Zotero for additional functionality. The list of plugins can be found at https://www.zotero.org/support/plugins. To install a plugin, you need to download its .xpi file to your computer. Then, in Zotero, click “Tools → Add-Ons,” then drag the .xpi for the plugin onto the Add-Ons window that opens. Two plugins will be of particular interest to us: Zotfile and BetterBibTeX. 1.2.4 Zotfile Zotfile (http://zotfile.com/) is a Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items, sync PDFs from your Zotero library to your (mobile) PDF reader (e.g. an iPad, Android tablet, etc.) and extract annotations from PDF files. This plugin is particularly helpful for organizing PDFs on your hard drive. By default, Zotero saves PDFs in a computationally safe, but humanely incomprehensible manner: each PDF, even if it is renamed from bibliographical metadata and is human readable, it is still placed into a folder whose name is a random sequence of characters. Zotfile allows you to organize PDFs in a more human-friendly manner. The first screenshot below shows Zotero default mode, while the second one shows Zotfile mode: essentially, Zotfile creates a folder for each author and PDFs of all publications by that author get placed in that folder. You can sync this folder with Dropbox or other cloud service and access it from your tablet or phone. Zotero default organization. Zotfile organization. 1.2.5 Better BibTeX for Zotero For a moment this will not be an immediately useful plug-in, but it is the most important one for our Memex project. This plugin exports bibliographical data into a bibTeX format, which is very easy to process with python scripts (it also generates citation keys which can be used for citation in markdown, which we will cover later). The two screenshots below show how the same record looks in Zotero preview and in the bibTeX format. A Record in Zotero. The Same Record in BibTeX Format. 1.3 Homework collect 30-50 bibliographic records into your Zotero (ideally with PDFs); the number may seem like a lot, but you will see that you can do that it will take only about 30 mins on JSTOR; those of you who are already using Zotero must already have more than 50 records in your databases. clearly, you should be collecting items that are relevant to your fields of study and your research; organize them into folders, if that is necessary; create Bibliography and email it to me (this is one-click operation; try to figure on your own how to do this; asking on Slack counts); make sure that you are comfortable with the main functionality of Zotero; that you have the discussed plugins installed; to get comfortable with the main functionality, you should practice each listed procedure at least a couple of times. in preparation for the next class, please, watch the following two short videos from Dr. Paul Vierthaler’s Hacking the Humanities series: Episode 1: Introduction to the Hacking the Humanities Tutorial Series and install Python via Anaconda; you can also install Python directly from https://www.python.org/, but Anaconda distribution might make your life easier, especially if you are on Windows. Episode 2: The Command Prompt. Submitting homework: Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. * In the subject of your email, please, add the following: CCXXXXX-LXX-HW-YourLastName-YourMatriculationNumber, where CCXXXXX is the numeric code of the course; LXX is the lesson for which the homework is being submitted; YourLastName is your last name, and YourMatriculationNumber is your matriculation number. "],
["lesson-02-command-line.html", "2 Lesson 02: Command Line 2.1 Command Line 2.2 Homework", " 2 Lesson 02: Command Line 2.1 Command Line The knowledge of “command line” opens a whole new world of opportunities, as the number of interface-less programs and applications is significantly larger; command line also offers a more robust and direct controls over a computer. The main goal is to learn the basics of this indispensable tool. We can use Terminal on Mac (installed), Powershell on MS Windows (should be installed), although other command line tools will work as well. Before we proceed, however, let’s discuss a few concepts: What a filesystem is How to run a program from the command line What it means to run a program How the computer knows what program to run How to refer to a file from the command line 2.1.1 The filesystem Every disk contains a filesystem and information about where disk data is stored and how it may be accessed by a user or application. A filesystem typically manages operations, such as storage management, file naming, directories/folders, metadata, access rules and privileges. Commonly used file systems include File Allocation Table 32 (FAT 32), New Technology File System (NTFS) and Hierarchical File System (HFS). All the files and programs on your computer are organized into folders; all these folders are in some other folders all the way down to your hard drive, which we call the root of your filesystem. Every hard drive, USB drive, DVD, and CD-ROM has its own filesystem. You normally look at the contents of your filesystem via the Finder (on Mac) or the Explorer (on Windows). Open a window there now. The Finder / Explorer window opens in some folder, which might be different depending on what computer operating system you’re using. But you’ll usually have a navigation bar to the left, that will let you go to different places. You see folders, also known as directories, and you might see files too. One thing that computer OSes like to hide from you is the fact that you have a home directory, where all your personal files and folders should live. This makes it easier for multiple users to use a single computer. You can find your home directory like this: On Mac, select Go &gt; Home in the menu. On Windows, click on Local Drive (C:), then click on Users, then click on your login name. You’ll see that your home directory has several folders in it already, that were created automatically for you when you first made a user account. Now how can you tell where you are, with respect to the root of your drive? On Mac, select View &gt; Show Path Bar in the menu. On Windows, look: The Finder / Explorer will also show you where in your computer’s filesystem you are. This is called the path—it shows you the path you have to take from the root of your filesystem to the folder you are in. Now if you are on Windows, click on that bar and you’ll see something surprising. This is your real path. The C:\\ is how Windows refers to the root of your filesystem. Also note that, even if your OS is not in English, the path may very well be! 2.1.2 Getting started with the command line Now that you have a hint of what is going on behind the scenes on your computer, let’s dive into the command line. Here is how you get there: On Mac, look for a program called Terminal.app On Windows, look for a program called Powershell By default, these shells open in your home directory. On Windows this is easy to see, but on Mac it is less clear—that is, until you know that this ~ thing is an alias for your home directory. 2.1.3 Components of the command line The command line consists of a prompt where you type your commands, the commands and arguments that you type, and the output that results from those commands. The prompt is the thing that looks like (where user is your username): MacBook-Pro:~ user$ or PS C:\\Users\\user&gt; You will never need to type the prompt. That means that, if you are noting down what we do in class for future reference, you should not copy this part! The prompt actually gives you a little bit of information. On Mac, it has the name of the computer, followed by a :, followed by the directory where you are, followed by your username, with $ at the end. On Windows, it has PS for PowerShell, followed by the name of the drive (C for most of you), followed by a :, followed by the full path to where you are, with &gt; at the end. When you type a command, nothing happens until you press the Return/Enter key. Some commands have output (more text that appears after you press Return/Enter) and others don’t. You cannot run another command until the prompt is given again. NOTE: From this point on, you will be running the commands that are run here! Let’s first make sure we are in our home directory by typing cd ~. For most of you this should change nothing, but now you know your first shell command. The cd stands for change directory, and what follows is the directory you want to go to. cd ~ Now let’s have a look around. The command to show what is in any particular directory is called ls, which stands for list. Try running it. ls If you are on Windows, what you get will look more like this: PS C:\\Users\\user&gt; ls You should then see something like: Verzeichnis: C:\\Users\\user Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 23.02.2016 21:18 .oracle_jre_usage d-r-- 23.02.2016 20:40 Contacts d-r-- 23.02.2016 20:40 Desktop d-r-- 23.02.2016 21:11 Documents d-r-- 23.02.2016 21:16 Downloads d---- 23.02.2016 21:24 exist d-r-- 23.02.2016 20:40 Favorites d-r-- 23.02.2016 20:40 Links d-r-- 23.02.2016 20:40 Music d-r-- 23.02.2016 20:40 Pictures d-r-- 23.02.2016 20:40 Saved Games d-r-- 23.02.2016 20:40 Searches d-r-- 23.02.2016 20:40 Videos PS C:\\Users\\user&gt; Now go into your documents folder and look around. cd Documents ls How does this compare to what you see in the Finder / Explorer window, if you click on the Documents folder? Another important command, which tells you where you are at any given time, is pwd. This means print working directory. Try it now and see what you get. pwd If ever you get lost on the command line, pwd will always help you find your way. 2.1.4 File paths and path notations By now you will have noticed that I’ve mentioned the path a few times, and that it seems to have something to do with this thing that pwd prints out. (And, most annoyingly, that it looks different on Mac and Windows) The bit of text that you get from pwd is what is called path notation, and it is very important that you learn it if you want to do anything with your own digital data. Here are some rules: The / (or \\\\ on Windows) separates folder names. So Desktop/Video means “the thing called Video inside the Desktop folder.” The / all by itself refers to the base of your hard drive (usually Macintosh HD or C:\\.) The ~ refers to your home folder. These things can be combined; ~/Documents means “the Documents folder in my home folder.” The . means “the current working directory,” i.e. what you would get if you ran the command pwd. The .. means “one directory back”—if pwd gives you /Users/user, then .. means /Users. If the path does not start with a . or a / or a ~, then it will be assumed to start with a ./, that is, “start from the current working directory.” Let’s wander around a bit. But, first, let’s download a zip file with some materials for this class. Unzip it somewhere and go to that folder in your Terminal or Powershell. cd /path/to/the/folder/tnt_practice_materials pwd cd ./cd 02_CommandLine/ pwd ls Try the following if you are on Mac ls -lh cd .. pwd NB: you can use TAB to autocomplete the path: type ls to see what folders are in Documents, then go to any one of them by typing cd (space) and then the first two letters &gt; after that use TAB and the name will be complete automatically. cd 03[TAB] pwd cd ../01[TAB] pwd ls McCarty_Modeling.pdf cd .. 2.1.5 Command line arguments So far we have learned three commands: cd, ls, and pwd. These are useful for navigation, but we can run a lot more commands once we learn them, and have a need for them! What are we doing, exactly? First word is the command All other words are the arguments Words must be separated by spaces cd is a command that expects an argument: the name of the directory you want to go to. But what if the name has a space in it? NB: You may think of most commands as sentences with subject, predicate, and object (or multiple objects). cd ./01_Zotero_Word/Green Eggs and Ham What happened there? Well, we have a folder called Green Eggs and Ham in our example, and we tried to go there. But since the command line works with arguments, and since arguments are separated by space, the machine interpreted this as if we were saying “Change to the ./01_Zotero_Word/Green folder, and then Eggs, and, Ham, whatever that means.” And it gave us an error, because we don’t have a folder called Green in our example. You can get around this. How you get around it depends on whether you’re on Windows or not. One way to get around it that should work both places is like this: On Windows: cd &#39;./01_Zotero_Word/Green Eggs and Ham&#39; On Mac (you need to escape spaces by adding a backslash in front of them): cd ./01_Zotero_Word/Green\\ Eggs\\ and\\ Ham/ NB: The easiest solution is to use TAB for autocomplete! 2.1.6 More commands With command line you can do everything that you became accustomed to be doing in a graphical interface of your favorite file manager. For example, you can copy, move, and delete files and folders. You can use: mv to move files rm (on Windows also: del) to remove/delete files cp to copy files In all cases you need to state which files you want to mv, rm, or cp. In some cases you also need to point where you want to mv or cp your files. NB: Syntax on Mac and Windows will vary slightly, but if you keep using [TAB] for autocompletion, there will be no different in the process of typing the command, so let’s try to do it this way. To start, let’s go to the root directory of our course materials. From there, let’s do the following: cd 01[TAB] ls cp Mc[TAB] Green[TAB] cd Green[TAB] ls NB: when you hit [TAB] after Mc you are not going to get the full autocomplete, because there are two files that start with McCarty_Modeling—one is pdf and another—txt. You will need to type one more letter p and then hit [TAB] again to get the file name that you need. Thus, the command can be transcribed as: M[TAB]p[TAB] Now let’s rm (delete) the McCarty_Modeling.pdf from this folder, then go to the folder where we copied it, and then mv (move) it back to where it was in the first place. rm M[TAB]p[TAB] ls cd G[TAB] mv Mc[TAB] ../ cd .. ls Tada! The McCarty_Modeling.pdf should now be back where it was. If you want to learn about new commands, try to google. Googling things like this is a very big part of being a DH scholar! You will most likely find your answers on https://stackoverflow.com/, which will become your most frequented resource, if you embark on the DH path. 2.2 Homework Command line Watch again a short video on Command Prompt in Dr. Vierthaler’s Hacking the Humanities series: Episode 2: The Command Prompt. Work through the following materials on command line which is relevant to your operating system. Ted Dawson, “Introduction to the Windows Command Line with PowerShell,” The Programming Historian 5 (2016), https://programminghistorian.org/en/lessons/intro-to-powershell. Ian Milligan and James Baker, “Introduction to the Bash Command Line,” The Programming Historian 3 (2014), https://programminghistorian.org/en/lessons/intro-to-bash. Python Work through Chapter I of Zelle’s book; read the entire chapter; retype and run all code snippets as described in the book; work through the chapter summary and exercises; complete all programming exercises; For submission: email me the results of “Programming Exercises.” In your submission there should be text files or python script files for exercises 1 (results of print function), 3, 4, 5, 7. Each python script should be working, i.e. you should be able to run it and get relevant results. You are welcome to discuss any of these assignments on Slack. Work through the following videos from Dr. Vierthaler’s Hacking the Humanities series: Episode 3: The Very Basics of Python Episode 4: Strings Episode 5: Integers, Floats, and Math in Python NB: The best way to work through these tutorials is to repeat all steps after the instructor. You can find the scripts at https://github.com/vierth/humanitiesTutorial. Submitting homework: Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: CCXXXXX-LXX-HW-YourLastName-YourMatriculationNumber, where CCXXXXX is the numeric code of the course; LXX is the lesson for which the homework is being submitted; YourLastName is your last name, and YourMatriculationNumber is your matriculation number. "],
["references.html", "References", " References "]
]
